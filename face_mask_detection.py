# -*- coding: utf-8 -*-
"""Face Mask Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G7IT23P8b1zW4prJw2gCMzbKywU-cNfa
"""

!pip install kaggle

# configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

# API to fetch the dataset from Kaggle
!kaggle datasets download -d omkargurav/face-mask-dataset

!ls

#extracting the compessed dataset
from zipfile import ZipFile
dataset = '/content/face-mask-dataset.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

!ls

"""**Importing dependencies**"""

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mping
import cv2
from google.colab.patches import cv2_imshow
from PIL import Image
from sklearn.model_selection import train_test_split

with_mask_files = os.listdir('/content/data/with_mask')
print(with_mask_files[0:5])
print(with_mask_files[-5:])

without_mask_files = os.listdir('/content/data/without_mask')
print(without_mask_files[0:5])
print(without_mask_files[-5:])

print('Number of with mask images: ',len(with_mask_files))
print('Number of without mask images: ',len(without_mask_files))

"""**Create Labels for the two classes**

**With Mask  -->  1**

**Without Mask  -->  0**
"""

#create the labels

with_mask_labels = [1]*len(with_mask_files)
without_mask_labels = [0]*len(without_mask_files)

print(with_mask_labels[0:5])

print(without_mask_labels[0:5])

print(len(with_mask_labels))

print(len(without_mask_labels))

#combine with and without mask lebels in one list

labels = with_mask_labels + withoutmask_labels

print(len(labels))
print(labels[0:5])
print(labels[-5:])

"""**Displaying Images **"""

#display with mask image
img = mping.imread('/content/data/with_mask/with_mask_933.jpg')
implot = plt.imshow(img)
plt.show()

#display with mask image
img = mping.imread('/content/data/without_mask/without_mask_3361.jpg')
implot = plt.imshow(img)
plt.show()

"""**Image Pricesssing**

**Resize images**

**Convert the images into numpy arrrays**
"""

#convert image into numpay array

#with mask images
with_mask_path = '/content/data/with_mask/'

data = []

for img_file in with_mask_files:

  image = Image.open(with_mask_path + img_file)
  #resize image as 128*128
  image = image.resize((128,128))
  #convert image into RGB color
  image = image.convert('RGB')
  #cinvert into numpy array
  image = np.array(image)
  data.append(image)



#without mask images

without_mask_path = '/content/data/without_mask/'

for img_file in without_mask_files:

  image = Image.open(without_mask_path + img_file)
  #resize image as 128*128
  image = image.resize((128,128))
  #convert image into RGB color
  image = image.convert('RGB')
  #cinvert into numpy array
  image = np.array(image)
  data.append(image)

type(data)

type(data[0])

len(data)

data[0]

data[0].shape

#converting image list and label into numpy array

x = np.array(data)
y = np.array(labels)

type(x)

type(y)

print(x.shape)
print(y.shape )

"""**Train Test Split**"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=5)

print(x.shape, x_train.shape, x_test.shape)

#scalling data

x_train_scaled = x_train / 255

x_test_scaled = x_test / 255

x_train_scaled[0]

"""**Building Convolutional Neural Network (CNN)**"""

import tensorflow as tf
from tensorflow import keras

num_of_classes = 2

model = keras.Sequential()

#first Convolutional layer
model.add(keras.layers.Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(128,128,3)))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))


#second Convolutional layer
model.add(keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

#flatten Layer. its conver as vector
model.add(keras.layers.Flatten())

#first dense layer
model.add(keras.layers.Dense(128, activation='relu'))
model.add(keras.layers.Dropout(0.5))

#second dense layer
model.add(keras.layers.Dense(64, activation='relu'))
model.add(keras.layers.Dropout(0.5))

#third dense layer
model.add(keras.layers.Dense(32, activation='relu'))
model.add(keras.layers.Dropout(0.5))

#output layer
model.add(keras.layers.Dense(num_of_classes, activation='softmax'))

#compile the neural network

model.compile(
    optimizer = 'adam',
    loss = 'sparse_categorical_crossentropy',
    metrics = ['acc']
)

#training the neural network

history = model.fit(x_train_scaled, y_train, validation_split=0.1, epochs=10)

"""**Model Evaluation**"""

#test accuracy

loss, accuracy = model.evaluate(x_test_scaled, y_test)
print('Test Accuracy = ', accuracy)

h = history

#plot the loss value
plt.plot(h.history['loss'], label='train loss')
plt.plot(h.history['val_loss'], label='validation loss')
plt.legend()
plt.show()


#plot the accuracy value
plt.plot(h.history['acc'], label='train accuracy')
plt.plot(h.history['val_acc'], label='validation accuracy')
plt.legend()
plt.show()

"""**Prediction System**"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

input_image_resized = cv2.resize(input_image, (128,128))

input_image_scaled = input_image_resized/255

input_image_reshaped = np.reshape(input_image_scaled, [1,128,128,3])

input_prediction = model.predict(input_image_reshaped)

print(input_prediction)


input_pred_label = np.argmax(input_prediction)

print(input_pred_label)


if input_pred_label == 1:

  print('The person in the image is wearing a mask')

else:

  print('The person in the image is not wearing a mask')

"""**Save a train Pickle file**"""

import pickle

# ... (your existing code) ...

# After training the model (after model.fit)
with open('Face_Mask_Detection.pkl', 'wb') as file:
  pickle.dump(model, file)

print("Model saved as Face_Mask_Detection_model.pkl")

